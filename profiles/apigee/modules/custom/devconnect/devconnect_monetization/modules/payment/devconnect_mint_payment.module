<?php

use Apigee\Mint\MonetizationPackage;
use Apigee\Mint\RatePlan;
use Apigee\Mint\Organization as Organization;
use Apigee\Exceptions\ResponseException;

/**
 * Implement callback_submit_form
 *
 * This forms is shown to the user when they select the payment provider.
 * And it is shown either if there is no recurring payment for this currency or
 * if the very first time they top up for this currency
 *
 * @param $payment_method
 * @param $pane_values
 * @param $checkout_pane
 * @param $order
 *
 * @return array
 */
function devconnect_mint_payment_submit_form($payment_method, $pane_values, $checkout_pane, $order) {


  $config = devconnect_monetization_default_org_config();
  $developer_id = _devconnect_monetization_get_developer_id(TRUE);

  $form = array(
    '#payment_method' => $payment_method,
    '#pane_values' => $pane_values,
    '#checkout_pane' => $checkout_pane,
    '#order' => $order,
    'debug' => array(
      //'#markup' => '<pre>' . print_r($payment_method, TRUE) . '</pre>',
    ),
  );

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currencyId = strtolower($order_wrapper->commerce_order_total->currency_code->value());

  // If first top up on this currency or if is not recurring on this currency
  // then show the recurring form
  // Mint backend does not honor initial setup values in here but in company settings
  /*
  $developerBalanceAPIObj = new DeveloperBalance($developer_id, $config);
  $developerBalance = $developerBalanceAPIObj->getByCurrencyId($currencyId);
  if (isset($developerBalance) && !$developerBalance->isRecurring()) {

    $form['#attributes']['class'][] = 'form-horizontal';

    $form['recurring_payment'] = array(
      '#title' => t('Recurring Payment'),
      '#type' => 'fieldset',
      '#collapsible' => FALSE,
    );

    $form['recurring_payment']['is_recurring'] = array(
      '#title' => t('Enable recurring payment'),
      '#type' => 'radios',
      '#required' => TRUE,
      '#options' => array(
        'isRecurring' => t('Yes'),
        'chargePerUsage' => t('No'),
      ),
      '#default_value' => 'no',
    );
    $form['recurring_payment']['recurring_amount'] = array(
      '#title' => t('Recurring Amount'),
      '#type' => 'textfield',
      '#description' => t('Amount to be topped up recurrently'),
      '#default_value' => $developerBalance->getSupportedCurrency()->getMinimumRecurringAmount(),
      '#disabled' => TRUE,
      '#attributes' => array(
        'class' => array(
          'numeric',
          'currency',
        ),
        'currency' => strtoupper($currencyId),
        'minimum' => $developerBalance->getSupportedCurrency()->getMinimumRecurringAmount(),
      ),
    );
    $form['recurring_payment']['replenish_amount'] = array(
      '#title' => t('Replenish Amount'),
      '#type' => 'textfield',
      '#default_value' => $developerBalance->getSupportedCurrency()->getMinimumRecurringAmount(),
      '#description' => t('Once your balance reaches this amount, another payment will be triggered'),
      '#disabled' => TRUE,
      '#attributes' => array(
        'class' => array(
          'numeric',
          'currency',
        ),
        'currency' => strtoupper($currencyId),
        'minimum' => 0,
      ),
    );
  }*/

  $message = t('(Continue with checkout to complete payment.)');
  if (module_hook($payment_method['module'], 'mint_continue_complete_message')) {
    $message = module_invoke($payment_method['module'], 'mint_continue_complete_message');
  }
  $form['continue_complete_message'] = array(
    '#markup' => $message,
  );

  return $form;
}

/**
 *
 * Implement callback_submit_form_validate
 *
 * @param array $payment_method
 * @param array $pane_form
 * @param array|mixed $pane_values
 * @param object $order
 * @param array $form_parents
 *
 * @return bool
 */
function devconnect_mint_payment_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  $is_recurring = isset($pane_form['is_recurring']) && ($pane_form['is_recurring']['#value'] == 'isRecurring');
  if ($is_recurring) {
    $recurring = $_POST['commerce_payment']['payment_method']['payment_details']['recurring_payment'];
    $valid = TRUE;

    // Values are cast to string and then to float to ensure float formatting
    $recurring_amount = $recurring['recurring_amount'] * 1.0;
    $replenish_amount = $recurring['replenish_amount'] * 1.0;
    if ($recurring_amount <= 0) {
      drupal_set_message(t('Recurring amount must be a valid numeric value and greater than 0.'), 'error');
      $valid = FALSE;
    }

    if (strlent($pane_form['replenish_amount']['#value']) && $replenish_amount == 0) {
      drupal_set_message(t('Replenish amount must be a valid numeric value.'), 'error');
      $valid = FALSE;
    }
    if (!($recurring_amount > $replenish_amount)) {
      drupal_set_message(t('Recurring amount must be greater than replenish amount.'), 'error');
      $valid = FALSE;
    }
    return $valid;
  }
}

/**
 * Implement callback_submit_form_submit
 *
 * @param $payment_method
 * @param $pane_form
 * @param $pane_values
 * @param $order
 * @param $charge
 */
function devconnect_mint_payment_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  if (isset($_POST['commerce_payment']['payment_details']['recurring_payment']['is_recurring'])) {
    $order->data['devconnect_mint_pane_values'] = $_POST['commerce_payment']['payment_details']['recurring_payment'];
  }
  else {
    $order->data['devconnect_mint_pane_values'] = NULL;
  }
  $order->data['devconnect_mint_payment_method'] = $payment_method;
  commerce_order_save($order);
}

/**
 * Implements callback_redirect_form
 *
 * @param $form
 * @param $form_state
 * @param $order
 * @param $payment_method
 *
 * @return array
 */
function devconnect_mint_payment_redirect_form($form, &$form_state, $order, $payment_method, $address = NULL) {
  global $user;
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = strtolower($order_wrapper->commerce_order_total->currency_code->value());

  $amount = commerce_currency_amount_to_decimal($order_wrapper->commerce_order_total->amount->value(), strtoupper($currency_code));

  $provider = module_invoke($payment_method['module'], 'mint_provider_id');

  $headers = array(
    'source' => $user->mail,
  );
  $parameters = array(
    'supportedCurrencyId' => $currency_code,
    'provider' => $provider,
    'amount' => $amount,
  );

  $recurring = $order->data['devconnect_mint_pane_values'];
  if (isset($recurring) && $recurring['is_recurring'] == 'isRecurring') {
    $parameters['isRecurring'] = 'true';
    $parameters['recurringAmount'] = $recurring['recurring_amount'];
    $parameters['replenishAmount'] = $recurring['replenish_amount'];
  }
  else {
    $parameters['chargePerUsage'] = 'true';
  }

  $profile = commerce_customer_profile_load($order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id']);

  // Get user billing address.
  if (!isset($address)) {
    $address = $profile->commerce_customer_address[LANGUAGE_NONE][0];
  }
  $payload = devconnect_mint_payment_build_address_payload($address);

  // Do not send the company ID, but instead sent the developer's email address
  // which is making this purchase.
  $developer = devconnect_monetization_developer_load();
  try {
    $payment = $developer->createPayment($parameters, $payload, $headers, $developer->getEmail());
  }
  catch (ResponseException $exception) {
    // If this is a white listing error at WorldPay, throw error with
    // 'emergency' severity so that monetization monitor picks up error.
    $exception_message = $exception->getMessage();
    $response = json_decode($exception->getResponse());
    $error_code = 0;
    $error_description = 'N/A';
    if(is_object($response) && property_exists($response,'errorCode')) {
      $error_code = $response->errorCode;
    }
    if(is_object($response) && property_exists($response,'errorDescription')) {
      $error_description = $response->errorDescription;
    }
    if($error_code == 4) {
      // WorldPay "Security violation" is errorCode 4, need to give
      // admin more info on why this happened:
      $more_details = "This error code usually indicates one of the following: (1) there is a difference between the merchant code used to set up the connection and that referred to in the XML message, (2) a connection has been attempted from an unregistered IP, or (3) the merchant is submitting to an inactive environment, usually because they have only activated the Test environment, but are attempting to submit to production.";
      $more_details .= "If you have not added the IP of the Apigee Edge Management Server to your Worldpay, you will need to login to the Worldpay Gateway and add the proper IP(s) to the 'Merchant Environment' under the 'Profile' tab.";
    }
    else {
      $more_details = '';
    }
    watchdog('devconnect_mint_payment', "%message Error Code: %error_code Error Description: %error_description !more_details", array('%message' => $exception_message, '%error_code' => $error_code, '%error_description' => $error_description, '!more_details' => $more_details), WATCHDOG_EMERGENCY);

    drupal_set_message(t('The WorldPay payment gateway is currently not available. Please select a different payment system or try again later.'), 'error');
    // Send the customer to the previous step of the checkout process, Worldpay is not working.
    commerce_payment_redirect_pane_previous_page($order, t("Could not create payment order: %error_code : %error_description", array('%error_code' => $error_code, '%error_description' => $error_description)));
    drupal_goto(commerce_checkout_order_uri($order));
  }
  if (is_object($payment) && !$payment->getSuccess()) {
    drupal_set_message(t('Could not create payment order. If problem persists please contact your administrator.'), 'warning');
    watchdog('devconnect_mint_payment', "Could not create payment order: @message", array('@message' => '<pre>' . print_r($payment, TRUE) . '</pre>'), WATCHDOG_WARNING);
    drupal_goto('<front>');
  }
  $form = module_invoke($payment_method['module'], 'mint_dispatch_redirect_form', $form, $form_state, $order, $payment_method, $payment);
  return $form;
}


function devconnect_mint_payment_build_address_payload($values) {
  $doc = new DOMDocument();
  $doc->formatOutput = true;
  $doc->appendChild($doc->createElementNS('http://www.apigee.com/monetization-service', 'address'))
  ->appendChild($doc->createElement('address1', $values['thoroughfare']))->parentNode
    ->appendChild($doc->createElement('address2', $values['premise']))->parentNode
    ->appendChild($doc->createElement('city', $values['locality']))->parentNode
    ->appendChild($doc->createElement('country', $values['country']))->parentNode
    ->appendChild($doc->createElement('state', $values['administrative_area']))->parentNode
    ->appendChild($doc->createElement('zip', $values['postal_code']));
  return $doc->saveXML();
}

/**
 * Implement hook_form_FORM_ID_alter()
 *
 * @param $form
 * @param $form_state
 */
function devconnect_mint_payment_form_commerce_checkout_form_checkout_alter(&$form, &$form_state) {

  $country_callback = &$form['customer_profile_billing']['commerce_customer_address'][LANGUAGE_NONE][0]['country']['#ajax'];

  $country_callback['effect'] = 'slide';
  $country_callback['prevent'] = 'click';

  $developer_id = _devconnect_monetization_get_developer_id(TRUE);
  $user = user_load_by_mail($developer_id);

  $account = entity_load('user', array($user->uid));
  $account = $account[$user->uid];

  $developer = devconnect_monetization_developer_load();

  $company = apigee_company_get_current_context_company();
  if (!empty($company)) {
    $address = json_decode($company->attributes['MINT_DEVELOPER_ADDRESS']);

    $address_profile = &$form['customer_profile_billing']['commerce_customer_address'][LANGUAGE_NONE][0]['#address'];
    $address_profile['name_line'] = $company->displayName;
    $address_profile['thoroughfare'] = $address->address1;
    $address_profile['premise'] = $address->address2;
    $address_profile['locality'] = $address->city;
    $address_profile['first_name'] = isset($account->field_first_name[LANGUAGE_NONE][0]['value']) ? $account->field_first_name[LANGUAGE_NONE][0]['value'] : '';
    $address_profile['last_name'] = isset($account->field_last_name[LANGUAGE_NONE][0]['value']) ? $account->field_last_name[LANGUAGE_NONE][0]['value'] : '';
    $address_profile['organisation_name'] = $developer->getConfig()->orgName;
    $address_profile['administrative_area'] = $address->state;
    $address_profile['postal_code'] = $address->zip;
    drupal_add_js(array('devconnect_mint_payment' => array('initial_address_country' => $address->country)), 'setting');

  }
  else {
    $address = NULL;
    foreach ($developer->getAddresses() as $address_item) {
      if ((is_array($address_item) && $address_item['isPrimary']) || (is_object($address_item) && $address_item->isPrimary())) {
        $address = is_array($address_item) ? (object) $address_item : $address_item;
        break;
      }
    }

    if (is_object($address)) {
      $address_profile = &$form['customer_profile_billing']['commerce_customer_address'][LANGUAGE_NONE][0]['#address'];
      $address_profile['name_line'] = $developer->getLegalName();
      $address_profile['thoroughfare'] = $address->getAddress1();
      $address_profile['premise'] = $address->getAddress2();
      $address_profile['locality'] = $address->getCity();
      $address_profile['first_name'] = isset($account->field_first_name[LANGUAGE_NONE][0]['value']) ? $account->field_first_name[LANGUAGE_NONE][0]['value'] : '';
      $address_profile['last_name'] = isset($account->field_last_name[LANGUAGE_NONE][0]['value']) ? $account->field_last_name[LANGUAGE_NONE][0]['value'] : '';
      $address_profile['organisation_name'] = $developer->getConfig()->orgName;
      $address_profile['administrative_area'] = $address->getState();
      $address_profile['postal_code'] = $address->getZip();
      drupal_add_js(array('devconnect_mint_payment' => array('initial_address_country' => $address->getCountry())), 'setting');
    }
  }
}


function devconnect_mint_payment_theme($existing, $type, $theme, $path) {
  $items = array();
  $template_path = drupal_get_path('module', 'devconnect_mint_payment') . '/templates';

  $items['devconnect_mint_payment_review_pane_1'] = array(
    'template'  => 'review-pane-1',
    'arguments' => array('user' => NULL),
    'path'      => $template_path
  );

  return $items;
}

function devconnect_mint_payment_commerce_checkout_pane_info(){
  $panes = array();
  $panes['devconnect_mint_payment_review_top_up_details_pane'] = array(
    'title' => 'Top up details',
    'page' => 'review',
    'enabled' => TRUE,
    'review' => FALSE,
    'fieldset' => TRUE,
    'collapsible' => FALSE,
    'collapsed' => FALSE,
    'base' => 'devconnect_mint_payment_review_top_up_details_pane',
  );
  return $panes;
}

function devconnect_mint_payment_review_top_up_details_pane_checkout_form(&$form, $form_state, $checkout_pane, $order) {

  $config = devconnect_monetization_default_org_config();
  $org = new Organization($config);
  $org->load();

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = strtoupper($order_wrapper->commerce_order_total->currency_code->value());

  $amount = commerce_currency_amount_to_decimal($order_wrapper->commerce_order_total->amount->value(),  $currency_code);

  $variables = array(
    'order' => $order,
    'api_provider' => $org->getDescription(),
    'amount' => $amount,
  );

  $form = array();
  $form['review_pane_1'] = array(
    '#type' => 'item',
    '#markup' => theme('devconnect_mint_payment_review_pane_1', $variables),
  );
  return $form;
}

function devconnect_mint_payment_purchase_plan($order) {

  $config = devconnect_monetization_default_org_config();
  $package = new MonetizationPackage($config);
  $developer = devconnect_monetization_developer_load();


  $package->load($order->data['purchase']['packageid']);
  $form_state = array(
    '#package' => $package,
    '#developer' => $developer,
    'values' => array(
      'start_date' => $order->data['purchase']['date'],
    ),
  );

  module_load_include('inc', 'devconnect_monetization', 'devconnect_monetization.plan');

  $rate_plan = new RatePlan($package->getId(), $config);
  $rate_plan->load($order->data['purchase']['planid']);
  if ($order->data['purchase']['overlap'] == 'true') {
    $form_state['rate_plan'] = $rate_plan;
    drupal_form_submit('devconnect_monetization_overlap_plan_confirm_form_submit', $form_state);
  }
  else {
    $form_state['values'] += array(
      'plan_options' => $order->data['purchase']['planid'],
      'action' => 'purchase',
    );
    drupal_form_submit('devconnect_monetization_purchase_plan_form', $form_state);
  }
  $order->data['purchase']['plan_name'] = $rate_plan->getDisplayName();
  $order->data['purchase']['package_name'] = $rate_plan->getMonetizationPackage()->getDisplayName();
  $order->data['purchase']['complete'] = TRUE;
  commerce_order_save($order);
}

function devconnect_mint_payment_init() {
  drupal_add_js(drupal_get_path('module', 'devconnect_mint_payment') . '/js/devconnect_mint_payment.js', 'file');
}

/**
 * Implements hook_devconnect_monitor_event_info().
 *
 * Implementations return an associative array whose keys define
 * the unique alert name and whose values are an associative array of
 * properties for each path.  The alert name can be anything you want,
 * but should be prefixed with your module name to make sure it is
 * unique, such as "mymodule_overheating" and "mymodule_virusdetected".
 *
 * The array contains the following properties:
 *
 * description: A description of the alert, this can be anything to help
 * the end user.
 *
 * log_type: The watchdog type to match against when deciding to
 * sent out an alert.
 *
 * log_severity: The watchdog severity to match against when deciding to
 * sent out an alert.
 *
 */
function devconnect_mint_payment_devconnect_monitor_event_info() {
  return array(
    'mint_critical' => array(
      'description' => t('Monetization payment errors.'),
      'log_type' => 'devconnect_mint_payment',
      'log_severity' => WATCHDOG_EMERGENCY,
    ),
  );
}
