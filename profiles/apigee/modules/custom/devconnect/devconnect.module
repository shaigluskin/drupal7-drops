<?php

use Drupal\devconnect\Crypto;
use Drupal\devconnect\ErrorHandling;
use Drupal\devconnect\VariableCache;
use Drupal\devconnect\WatchdogLogger;

/**
 * Implements hook_init().
 *
 * Registers our custom autoloader.
 */
function devconnect_init() {
  static $already_booted = FALSE;
  if (!$already_booted) {
    if (!module_exists('libraries')) {
      module_load_include('module', 'libraries');
    }
    $lib_dir = libraries_get_path('mgmt-api-php-sdk');
    // During migrations, we might get an empty lib dir due to bad cached
    // install_profile value.
    if (empty($lib_dir)) {
      $lib_dir = 'profiles/apigee/libraries/mgmt-api-php-sdk';
    }
    require_once $lib_dir . '/vendor/autoload.php';

    require_once __DIR__ . '/lib/Crypto.php';
    require_once __DIR__ . '/lib/ErrorHandling.php';
    require_once __DIR__ . '/lib/VariableCache.php';
    require_once __DIR__ . '/lib/WatchdogLogger.php';

    $already_booted = TRUE;

    Crypto::setKey(devconnect_get_crypt_key());
  }
}

/**
 * Implements hook_menu_alter().
 *
 * Denies access to PHP execution URL in the devel module if it is enabled.
 *
 * @param $items
 */
function devconnect_menu_alter(&$items) {
  if (isset($items['devel/php'])) {
    $items['devel/php']['access callback'] = FALSE;
  }
}

function devconnect_menu() {
  $items = array();
  $items['admin/config/devconnect'] = array(
    'title' => 'Dev Portal Settings',
    'description' => 'Apigee Edge authentication settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_admin_form'),
    'access arguments' => array('administer organization settings'),
    'file' => 'devconnect.admin.inc'
  );
  return $items;
}

/**
 * Implements hook_filter_info_alter().
 *
 * Removes Display Suite and PHP Code filters if they are enabled, because
 * they expose security vulnerabilities.
 *
 * @TODO: devconnect_downloads currently relies on presence of ds_code filter.
 *        That module should be reworked so that this is no longer the case,
 *        then the conditional below should be removed.
 *
 * @param $info
 */
function devconnect_filter_info_alter(&$info) {
  if (!module_exists('devconnect_downloads')) {
    if (array_key_exists('ds_code', $info)) {
      unset ($info['ds_code']);
    }
  }
  if (array_key_exists('php_code', $info)) {
    unset($info['php_code']);
  }
}

/**
 * Implements hook_variable_group_info().
 *
 * @return array
 */
function devconnect_variable_group_info() {
  $groups['devconnect'] = array(
    'title' => t('Devconnect settings'),
    'description' => t('Settings for this Devconnect instance. Change these values with great care!'),
    'access' => 'administer organization settings',
    'path' => array('admin/config/devconnect'),
  );
  return $groups;
}

/**
 * Implements hook_permission().
 *
 * @return array
 */
function devconnect_permission() {
  return array(
    'administer organization settings' => array(
      'title' => 'Administer organization settings',
      'restrict access' => TRUE,
    ),
    'view devconnect errors' => array(
      'title' => 'View DevConnect error detail',
      'restrict access' => TRUE
    )
  );
}

/**
 * Implements hook_cron.
 */
function devconnect_cron() {
  // query & store environments
  try {
    $dev_app = new Apigee\ManagementAPI\DeveloperAppAnalytics(devconnect_default_org_config());
    $environments = $dev_app->queryEnvironments();
    variable_set('devconnect_org_environments', $environments);
  } catch (Exception $e) {
    // Ignore any exceptions thrown. These probably result from
    // misconfiguration of the endpoint.
  }
}


/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function devconnect_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_login') {
    $form['userpasswordlink'] = array(
      '#markup' => '<br>' . l('Forgot your password?', 'user/password') . '<br><br>',
      '#weight' => 100
    );
  }
}

/**
 * Implements hook_theme().
 *
 * @return array
 */
function devconnect_theme() {
  $items = array();
  $tpl_path = drupal_get_path('module', 'devconnect') . '/templates';
  $items['devconnect_error_inline'] = array(
    'path' => $tpl_path,
    'template' => 'devconnect_error_inline',
    'variables' => array('summary' => NULL, 'detail' => NULL),
  );
  $items['devconnect_error_message'] = array(
    'path' => $tpl_path,
    'template' => 'devconnect_error_message',
    'variables' => array('summary' => NULL, 'detail' => NULL, 'severity' => 'error'),
  );
  return $items;
}

/**
 * Backwards-compatibility wrapper for devconnect_default_org_config().
 *
 * Use devconnect_default_org_config() instead for all new code.
 *
 * @return \Apigee\Util\OrgConfig
 * @deprecated
 */
function devconnect_default_api_client() {
  return devconnect_default_org_config();
}

/**
 * Returns a wrapper around org connection settings.
 *
 * @param string $requested_org
 * @return Apigee\Util\OrgConfig
 */
function devconnect_default_org_config($requested_org = 'default') {
  $configs = &drupal_static(__FUNCTION__, array());

  if (!array_key_exists($requested_org, $configs)) {
    // Make sure autoloader is run.
    devconnect_init();
    $settings = devconnect_get_org_settings();
    drupal_alter('devconnect_org_settings', $settings, $requested_org);

    $logger = new WatchdogLogger();
    $logger::setLogThreshold($settings['log_threshold']);
    $user_mail = user_is_logged_in() ? $GLOBALS['user']->mail : NULL;

    $adapter = new \Guzzle\Log\PsrLogAdapter($logger);
    $message = '<pre>' . \Guzzle\Log\MessageFormatter::DEBUG_FORMAT . '</pre>';
    $guzzle_log_plugin = new \Guzzle\Plugin\Log\LogPlugin($adapter, $message);

    $options = array(
      'logger' => $logger,
      'user_mail' => $user_mail,
      'subscribers' => array($guzzle_log_plugin),
      'http_options' => array(
        'connect_timeout' => intval($settings['connection_timeout']),
        'timeout' => intval($settings['request_timeout'])
      ),
      'user_agent' => devconnect_get_build_version(),
      'variable_store' => new VariableCache(),
      'referer' => url($_GET['q'], array('absolute' => TRUE))
    );
    if (function_exists('devconnect_debug_register')) {
      $options['debug_callbacks'] = array('devconnect_debug_register');
    }
    $configs[$requested_org] = new Apigee\Util\OrgConfig($settings['org'], $settings['endpoint'], $settings['user'], $settings['pass'], $options);
  }
  return $configs[$requested_org];
}

/**
 * Gets the version of the current release from the buildInfo file if present,
 * or else from the version of the devconnect module.
 *
 * @return string
 */
function devconnect_get_build_version() {
  static $build_version;
  if (!isset($build_version)) {
    $buildInfo = FALSE;
    if (file_exists(DRUPAL_ROOT . '/buildInfo')) {
      $buildInfo = DRUPAL_ROOT . '/buildInfo';
    }
    elseif (file_exists(DRUPAL_ROOT . '/profiles/apigee/buildInfo')) {
      $buildInfo = DRUPAL_ROOT . '/profiles/apigee/buildInfo';
    }
    $build_version = FALSE;
    if ($buildInfo) {
      $fp = fopen($buildInfo, 'r');
      $line = trim(fgets($fp));
      fclose($fp);
      if (preg_match('!([0-9.]{2,})$!', $line, $matches)) {
        $build_version = 'DevPortal/' . $matches[1];
      }
    }
    if (!$build_version) {
      $info = system_get_info('module', 'devconnect');
      $build_version = 'devconnect/' . $info['version'];
    }
  }
  return $build_version;
}

/**
 * Logs use of deprecated classes and functions (from pre-R21 days)
 * so that we can bring CS code up to current standards.
 */
function _devconnect_warn_deprecated() {
  if (version_compare(PHP_VERSION, '5.4', '>=')) {
    // Be more efficient when running PHP 5.4
    $backtrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 2);
  }
  elseif (version_compare(PHP_VERSION, '5.3.6', '>=')) {
    // Sigh. Pull entire backtrace.
    $backtrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
  }
  else {
    // We are dealing with real dinosaurs here. Be even less efficient.
    // PHP < 5.3.6 does not support any args to debug_backtrace().
    $backtrace = debug_backtrace();
  }
  $frame = $backtrace[1];

  if (isset($frame['class'])) {
    $subject = 'class ' . $frame['class'];
    $verb = 'instantiated';
  }
  else {
    $subject = 'function ' . $frame['function'];
    $verb = 'invoked';
  }
  $message = 'Deprecated %subject was %verb in file %file, line %line.';
  $args = array(
    '%subject' => $subject,
    '%verb' => $verb,
    '%file' => $frame['file'],
    '%line' => $frame['line']
  );
  devconnect_default_org_config()->logger->warning(t($message, $args), array('type' => 'devconnect'));
}

/**
 * Common error/notification handler for Edge faults.
 *
 * Invokes hook_devconnect_error_alter() to change how messages are displayed.
 *
 * @param int $error_code
 * @param string $summary
 * @param string $details
 * @param int $severity
 * @param int $display
 * @return bool|string
 */
function devconnect_notify($error_code, $summary, $details, $severity = ErrorHandling::SEVERITY_ERROR, $display = ErrorHandling::DISPLAY_MESSAGE) {
  drupal_alter('devconnect_error', $error_code, $summary, $details, $severity, $display);

  switch ($severity) {
    case ErrorHandling::SEVERITY_STATUS:
      $message_type = 'status';
      break;
    case ErrorHandling::SEVERITY_WARNING:
      $message_type = 'warning';
      break;
    default:
      $message_type = 'error';
      break;
  }
  if (!user_access('view devconnect errors')) {
    $details = NULL;
  }
  if ($display == ErrorHandling::DISPLAY_MESSAGE) {
    $formatted_message = theme('devconnect_error_message', array('summary' => $summary, 'detail' => $details));
    drupal_set_message($formatted_message, $message_type);
    return FALSE;
  }
  return theme('devconnect_error_inline', array(
    'summary' => $summary,
    'detail' => $details,
    'severity' => $message_type
  ));
}

function devconnect_get_debug_data() {
  return Apigee\Util\DebugData::toArray();
}

function devconnect_get_crypt_key() {
  $private_dir = variable_get('apigee_credential_dir', 'sites/default/files/private');
  if (is_file(DRUPAL_ROOT . '/' . $private_dir . '/.apigee.key')) {
    $key = file_get_contents(DRUPAL_ROOT . '/' . $private_dir . '/.apigee.key');
  }
  if (empty($key)) {
    $key = variable_get('apigee_crypt_key', NULL);
  }
  if (empty($key)) {
    $key = hash('SHA256', 'w3-Love_ap|s', TRUE);
  }
  return $key;
}

/**
 * Fetches Edge configuration settings.
 *
 * If settings have been saved encrypted in the .apigee file in the private
 * filesystem, use those. If they exist in the database, use those. If they
 * exist in a YAML file from a legacy Dev Portal install, use those.
 *
 * If settings were not read from the .apigee file, we then save them to the
 * .apigee file and delete them from the database (we also try to delete the
 * YAML file if it is present).
 *
 * @return array
 */
function &devconnect_get_org_settings() {
  devconnect_init();

  $private_dir = variable_get('apigee_credential_dir', 'sites/default/files/private');
  $key = devconnect_get_crypt_key();
  Crypto::setKey($key);

  $config_file = DRUPAL_ROOT . '/' . $private_dir . '/.apigee';
  $got_results = FALSE;
  $has_mcrypt = defined('MCRYPT_RIJNDAEL_128');
  $yaml_file = NULL;
  if (file_exists($config_file)) {
    $encrypted = file_get_contents($config_file);
    if ($encrypted && $has_mcrypt) {
      try {
        $decrypted = Crypto::decrypt($encrypted);
        if ($decrypted) {
          $custom_vars = @unserialize($decrypted);
          if (!is_array($custom_vars) || empty($custom_vars)) {
            $custom_vars = NULL;
          }
          else {
            $got_results = TRUE;
          }
        }
      }
      catch (Exception $e) {
      }
    }
  }
  if (!$got_results) {
    $custom_vars = variable_get('devconnect_org_settings', NULL);
    $got_results = !empty($custom_vars);
    if (!$got_results) {
      $possible_paths = array('sites/default/private', 'sites/default/files/private');
      $private_filesystem = variable_get('file_private_path', NULL);
      if ($private_filesystem) {
        array_unshift($possible_paths, $private_filesystem);
      }
      foreach ($possible_paths as $config_path) {
        $yaml_file = "$config_path/config/active/devconnect.settings.yml";
        if (file_exists($yaml_file)) {
          if (!module_exists('libraries')) {
            module_load_include('module', 'libraries');
          }
          require_once libraries_get_path('spyc') . '/Spyc.php';
          $custom_vars = spyc_load_file($yaml_file);
          if (array_key_exists('pass', $custom_vars) && $has_mcrypt) {
            try {
              $pass = Crypto::decrypt($custom_vars['pass']);
              if ($pass) {
                $custom_vars['pass'] = $pass;
              }
            } catch (Exception $e) {
            }
          }
          $got_results = TRUE;
          break;
        }
      }
    }
  }

  if (empty($custom_vars)) {
    $custom_vars = array(
      'org' => '',
      'user' => '',
      'endpoint' => 'https://api.enterprise.apigee.com/v1',
      'pass' => '',
      'log_threshold' => 4,
      'connection_timeout' => 4,
      'request_timeout' => 4
    );
  }
  elseif (array_key_exists('pass', $custom_vars) && $has_mcrypt) {
    try {
      $pass = Crypto::decrypt($custom_vars['pass']);
      if ($pass) {
        $custom_vars['pass'] = $pass;
      }
    } catch (Exception $e) {
    }
  }

  if ($got_results && $has_mcrypt) {
    if (!file_exists($config_file)) {
      file_put_contents($config_file, Crypto::encrypt(serialize($custom_vars)));
      // Let drush touch this file
      @chmod($config_file, 0666);
      variable_del('devconnect_org_settings');
    }
    if (isset($yaml_file) && file_exists(DRUPAL_ROOT . '/' . $yaml_file)) {
      @unlink(DRUPAL_ROOT . '/' . $yaml_file);
    }
  }
  return $custom_vars;
}

/**
 * Implements hook_devconnect_monitor_event_info().
 *
 * Implementations return an associative array whose keys define
 * the unique alert name and whose values are an associative array of
 * properties for each path.  The alert name can be anything you want,
 * but should be prefixed with your module name to make sure it is
 * unique, such as "mymodule_overheating" and "mymodule_virusdetected".
 *
 * The array contains the following properties:
 *
 * description: A description of the alert, this can be anything to help
 * the end user.
 *
 * log_type: The watchdog type to match against when deciding to
 * sent out an alert.
 *
 * log_severity: The watchdog severity to match against when deciding to
 * sent out an alert.
 *
 */
function devconnect_devconnect_monitor_event_info() {
  return array(
    'edge_api_exceptions' => array(
      'description' => t('Edge API exceptions and timeouts.'),
      'log_type' => 'APIObject',
      'log_severity' => WATCHDOG_EMERGENCY,
    ),
  );
}

/**
 * Implements hook_update_projects_alter().
 *
 * Since we don't want jquery_update to update past version 2.3, we remove it
 * from the list of modules & themes that are candidates for update.
 *
 * @param $projects
 */
function devconnect_update_projects_alter(&$projects) {
  if (array_key_exists('jquery_update', $projects)) {
    unset($projects['jquery_update']);
  }
}

/**
 * Finds a useable cli version of PHP, of at least version 5.3.
 *
 * Special magic is required on Pantheon because PHP is outside the path.
 * Ditto for MAMP users.
 *
 * @return bool
 */
function devconnect_php_cli() {
  static $php_cli;

  if (!isset($php_cli)) {
    $php_cli = FALSE;
    // Note: safe_mode is deprecated in PHP 5.3 and removed in 5.4.
    // It is here largely as a fallback for OPDK installs who have ported
    // their php.ini from a 5.2 or earlier install.
    $safe_mode = strtolower(ini_get('safe_mode'));
    $safe_mode = ($safe_mode == '1' || $safe_mode == 'on');
    if (substr(php_uname(), 0, 7) == 'Windows' || $safe_mode) {
      goto standard_exit;
    }

    if (is_dir('/opt/pantheon')) {
      $php_dirs = array();
      if ($dh = opendir('/opt/pantheon')) {
        while (($file = readdir($dh)) !== FALSE) {
          if (is_dir('/opt/pantheon/' . $file) && substr($file, 0, 4) == 'php-' && is_executable("/opt/pantheon/$file/php")) {
            $php_dirs[] = $file;
          }
        }
        closedir($dh);
      }
      if (count($php_dirs) > 0) {
        // Get highest-versioned PHP.
        rsort($php_dirs);
        $php_cli = '/opt/pantheon/' . $php_dirs[0] . '/php';
      }
    }

    // OSX developers using MAMP.
    if (!$php_cli && is_dir('/Applications/MAMP/bin')) {
      $php_dirs = array();
      if ($dh = opendir('/Applications/MAMP/bin')) {
        while (($file = readdir($dh)) !== FALSE) {
          if (is_dir('/Applications/MAMP/bin/' . $file) && substr($file, 0, 4) == 'php5' && is_executable("/Applications/MAMP/bin/$file/bin/php")) {
            $php_dirs[] = $file;
          }
        }
        closedir($dh);
      }
      if (count($php_dirs) > 0) {
        // Get highest-versioned PHP.
        rsort($php_dirs);
        $php_cli = '/Applications/MAMP/bin/' . $php_dirs[0] . '/bin/php';
      }
    }

    // Presumably not on Pantheon.
    if (!$php_cli) {
      $path_elements = explode(PATH_SEPARATOR, $_SERVER['PATH']);
      // /usr/local/bin may not be in Apache's path, but homebrew users
      // might be using the PHP found there.
      array_unshift($path_elements, '/usr/local/bin');
      $versions = array('56', '55', '54', '53', '');
      $suffixes = array('-cli', '');
      foreach ($suffixes as $suffix) {
        foreach ($versions as $version) {
          foreach ($path_elements as $path) {
            if (is_executable("$path/php$version$suffix")) {
              $php_cli = "$path/php$version$suffix";
              break 3; // breaks out of outermost foreach
            }
          }
        }
      }
    }
  }
  // If we have an unversioned PHP executable, make sure its version is
  // high enough for our purposes.
  if (!empty($php_cli)) {
    $php_base = basename($php_cli);
    if ($php_base == 'php' || $php_base == 'php-cli') {
      $output = shell_exec($php_cli . ' --version 2>&1');
      list($line) = @explode(PHP_EOL, $output, 2);
      $parts = @explode(' ', $line);
      if (count($parts) < 2 || (substr($parts[1], 0, 1) != '5' && substr($parts[1], 0, 1) != '7') || !version_compare($parts[1], '5.3.0', '>')) {
        $php_cli = FALSE;
      }
    }
  }

standard_exit:
  return $php_cli;
}

/**
 * Implements hook_sumo_site_id_alter().
 *
 * Appends org name to the end of the X-Sumo-Name header value when logging
 * to Sumo Logic.
 */
function devconnect_sumo_site_id_alter(&$site_id) {
  $config = devconnect_default_org_config();
  if (!empty($config->orgName)) {
    $site_id .= '.' . $config->orgName;
  }
}
