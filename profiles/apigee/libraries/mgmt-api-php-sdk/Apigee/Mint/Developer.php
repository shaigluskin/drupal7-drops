<?php

namespace Apigee\Mint;

use Apigee\Exceptions\ResponseException;
use Apigee\Mint\DataStructures\Payment;
use Apigee\Mint\Exceptions\MintApiException;
use Apigee\Mint\DataStructures\RevenueReport;
use Apigee\Mint\DataStructures\TransactionBrokerage;
use Apigee\Mint\Types\BillingType;
use Apigee\Mint\Types\DeveloperType;
use Apigee\Mint\Types\DeveloperStatusType;
use Apigee\Mint\DeveloperBalance;
use Apigee\Exceptions\ParameterException;

class Developer extends Base\BaseObject
{

    /**
     * @var double
     */
    private $approxTaxRate;

    /**
     * @var array
     */
    private $addresses;

    /**
     * @var \Apigee\Mint\BankDetail
     */
    private $bankDetail;

    /**
     * @var string
     */
    private $billingType;

    /**
     * @var string
     */
    private $billingProfile;

    /**
     * @var bool
     */
    private $broker;

    /**
     * @var \Apigee\Mint\DeveloperCategory
     */
    private $developerCategory;

    private $developerRole;

    /**
     * @var string
     * Unique identifier
     */
    public $email;

    /**
     * @var boolean
     */
    private $hasSelfBilling;

    /**
     * @var string
     */
    private $id;

    /**
     * @var string
     */
    private $legalName;

    /**
     * @var string
     */
    private $name;

    /**
     * @var string
     */
    private $registrationId;

    /**
     * @var \Apigee\Mint\Organization
     */
    private $organization;

    /**
     * @var \Apigee\Mint\Developer
     */
    private $parentId;

    /**
     * @var string
     */
    private $phone;

    /**
     * @var \Apigee\Mint\DeveloperRatePlan
     */
    private $ratePlan;

    /**
     * @var string
     */
    private $status;

    /**
     * @var string
     */
    private $taxExemptAuthNo;

    /**
     * @var \Apigee\Mint\DataStructures\TransactionBrokerage
     */
    private $transactionBrokerages;

    /**
     * @var string
     */
    private $type;


    public function __construct(\Apigee\Util\OrgConfig $config)
    {
        $base_url = '/mint/organizations/' . rawurlencode($config->orgName) . '/developers';
        $this->init($config, $base_url);

        $this->wrapperTag = 'developer';
        $this->idField = 'email';
        $this->idIsAutogenerated = false;

        $this->initValues();
    }

    /**
     * Implements Base\BaseObject::instantiateNew().
     *
     * @return Developer
     */
    public function instantiateNew()
    {
        return new Developer($this->config);
    }

    public function loadFromRawData($data, $reset = false)
    {
        if ($reset) {
            $this->initValues();
        }
        $excluded_properties = array(
            'address',
            'organization',
            'transactionBrokerages',
            'ratePlan',
            'parentId',
            'developerCategory',
        );
        foreach (array_keys($data) as $property) {
            if (in_array($property, $excluded_properties)) {
                continue;
            }

            // form the setter method name to invoke setXxxx
            $setter_method = 'set' . ucfirst($property);

            if (method_exists($this, $setter_method)) {
                $this->$setter_method($data[$property]);
            } else {
                self::$logger->notice('No setter method was found for property "' . $property . '"');
            }
        }
        $this->id = $data['id'];
        if (isset($data['address']) && is_array($data['address']) && count($data['address']) > 0) {
            foreach ($data['address'] as $addr_item) {
                $this->addresses[] = new DataStructures\Address($addr_item);
            }
        }

        if (isset($data['organization'])) {
            $organization = new Organization($this->config);
            $organization->loadFromRawData($data['organization']);
            $this->organization = $organization;
        }
        if (isset($data['transactionBrokerages'])) {
            foreach ($data['transactionBrokerages'] as $trans_brok) {
                $this->transactionBrokerages[] = new TransactionBrokerage($trans_brok);
            }
        }
        if (isset($data['ratePlan'])) {
            foreach ($data['ratePlan'] as $rate_plan_data) {
                $dev_rate_plan = new DeveloperRatePlan($this->email, $this->config);
                $dev_rate_plan->loadFromRawData($rate_plan_data);
                $this->ratePlan[] = $dev_rate_plan;
            }
        }
        if (isset($data['parentId'])) {
            $parent = new Developer($this->config);
            $parent->loadFromRawData($data['parentId']);
            $this->parentId = $parent;
        }
        if (isset($data['developerCategory'])) {
            $dev_cat = new DeveloperCategory($this->config);
            $dev_cat->loadFromRawData($data['developerCategory']);
            $this->developerCategory = $dev_cat;
        }
    }

    protected function initValues()
    {
        $this->addresses = array();
        $this->billingType = 'PREPAID';
        $this->broker = false;
        $this->email = null;
        $this->legalName = null;
        $this->name = null;
        $this->registrationId = null;
        $this->status = 'ACTIVE';
        $this->type = 'UNTRUSTED';
    }

    public function __toString()
    {
        $obj = array();
        $obj['address'] = $this->addresses;
        $obj['organization'] = array('id' => $this->organization->getId());

        $properties = array_keys(get_object_vars($this));
        $excluded_properties = array_keys(get_class_vars(get_parent_class($this)));
        foreach ($properties as $property) {
            if ($property == 'address' || $property == 'organization' || in_array($property, $excluded_properties)) {
                continue;
            }
            if (isset($this->$property)) {
                $obj[$property] = $this->$property;
            }
        }
        return json_encode($obj);
    }


    public function getApplications()
    {
        return new Application($this->email, $this->config);
    }

    public function getBankDetails($refresh = false)
    {
        if (!isset($this->bankDetail) || $refresh) {
            $this->bankDetail = new BankDetail($this->email, $this->config);
            $this->bankDetail->load();
        }
        return $this->bankDetail;
    }

    public function getAcceptedRatePlans()
    {
        $url = rawurlencode($this->email) . '/developer-accepted-rateplans';
        $this->get($url);
        $response = $this->responseObj;

        $return_objects = array();
        foreach ($response['developerRatePlan'] as $response_data) {
            $developerRatePlan = new DeveloperRatePlan($this->getEmail(), $this->config);
            $developerRatePlan->loadFromRawData($response_data);
            $return_objects[] = $developerRatePlan;

        }
        return $return_objects;
    }

    public function getPrepaidBalance($month = null, $billingYear = null, $currencyId = null, $ownerId = null)
    {
        $identifier = $ownerId ?: $this->email;

        $month = $month ?: date('F');
        $billingYear = $billingYear ?: date('Y');

        $options = array(
            'query' => array(
                'billingMonth' => strtoupper($month),
                'billingYear' => $billingYear,
                'supportedCurrencyId' => $currencyId,
            ),
        );
        $url = rawurlencode($identifier) . '/prepaid-developer-balance';
        $this->get($url, 'application/json; charset=utf-8', array(), $options);
        $response = $this->responseObj;
        $returnObjects = array();
        foreach ($response['developerBalance'] as $responseData) {
            $obj = new DeveloperBalance($identifier, $this->getConfig());
            $obj->loadFromRawData($responseData);
            $returnObjects[] = $obj;
        }
        return $returnObjects;
    }

    /**
     * Creates a payment request
     *
     * @param array $parameters
     * @param string $address
     *
     * @return \Apigee\Mint\DataStructures\Payment
     * @throws \Apigee\Exceptions\ResponseException
     */
    public function createPayment(array $parameters, $address, array $headers, $developer_or_company_id = null)
    {
        $id = $developer_or_company_id ?: $this->email;

        $options = array(
            'query' => $parameters,
        );
        $url = rawurlencode($id) . '/payment';
        $this->post(
            $url,
            $address,
            'application/xml; charset=utf-8',
            'application/json; charset=utf-8',
            $headers,
            $options
        );
        if ($this->responseCode == 200) {
            // Make sure the response did not fail, where success value is
            // FALSE from WorldPay.
            // TODO: These error responses need to be payment provider agnostic.
            if (isset($this->responseObj['success']) && !$this->responseObj['success']) {
                throw new ResponseException(
                    'Payment server response unsuccessful',
                    $this->responseCode,
                    $url,
                    $options,
                    $this->responseText
                );
            }
            $payment = new Payment($this->responseObj);
            return $payment;
        }
        throw new ResponseException(
            'Payment server response failed',
            $this->responseCode,
            $url,
            $options,
            $this->responseText
        );
    }

    public function topUpPrepaidBalance($new_balance, $developer_or_company_id = null)
    {
        $id = $developer_or_company_id ?: $this->email;
        $url = rawurlencode($id) . '/developer-balances';
        $this->post($url, $new_balance);
    }

    public function getRevenueReport($report)
    {
        $url = '/mint/organizations/'
            . rawurlencode($this->config->orgName)
            . '/developers/'
            . rawurlencode($this->email)
            . '/revenue-reports';
        $content_type = 'application/json; charset=utf-8';
        $accept_type = 'application/octet-stream; charset=utf-8';

        $this->setBaseUrl($url);
        $this->post(null, $report, $content_type, $accept_type);
        $this->restoreBaseUrl();
        $response = $this->responseText;
        return $response;
    }

    public function saveReportDefinition($report_def)
    {
        $url = '/mint/organizations/'
            . rawurlencode($this->config->orgName)
            . '/developers/'
            . rawurlencode($this->email)
            . '/report-definitions';
        $this->setBaseUrl($url);
        $this->post(null, $report_def);
        $this->restoreBaseUrl();
    }

    public function getReportDefinitions()
    {
        $url = '/mint/organizations/'
            . rawurlencode($this->config->orgName)
            . '/developers/'
            . rawurlencode($this->email)
            . '/report-definitions';
        $this->setBaseUrl($url);
        $this->get();
        $this->restoreBaseUrl();
        $data = $this->responseObj;
        $revenue_reports = array();
        foreach ($data['reportDefinition'] as $report) {
            $revenue_report = new RevenueReport($report, $this);
            $revenue_reports[] = $revenue_report;
        }
        return $revenue_reports;
    }

    /**
     * Retrieve the ratePlan associated with a given product
     * @param string $product_id
     *   Product Id
     * @param string $developer_id
     *   Developer email
     * @throws ParameterException
     *   Throw if no developer id is provided or email property is null
     * @throws MintApiException
     *   Throw if Exception is related to Mint API
     * @throws \Exception
     *   Throw if any other exception
     * @return \Apigee\Mint\RatePlan
     *   The RatePlan associated to this Product
     */
    public function getRatePlanByProduct($product_id, $developer_id = null)
    {
        if (empty($developer_id)) {
            if (!empty($this->email)) {
                $developer_id = $this->email;
            } else {
                throw new ParameterException("Developer id not specified");
            }
        }
        try {
            $url = rawurlencode($developer_id)
                . '/products/'
                . rawurlencode($product_id)
                . '/rate-plan-by-developer-product/';
            $this->get($url);
            $ratePlan = new RatePlan(null, $this->config);
            $ratePlan->loadFromRawData($this->responseObj);
            return $ratePlan;
        } catch (\Exception $e) {
            if (MintApiException::isMintExceptionCode($e)) {
                throw new MintApiException($e);
            } else {
                throw $e;
            }
        }
        return $products;
    }

    /**
     * Get eligible Mint products for this developer.
     *
     * This function calls the /eligible-products API to find
     * out what products this developer is able to purchase.  If the product
     * is associated to one or more packages, then the product is not displayed
     * unless the developer has purchased a plan that has that product
     * associated to it.
     *
     * @return array of
     * @throws \Apigee\Exceptions\ParameterException
     * @throws \Apigee\Mint\Exceptions\MintApiException
     * @throws \Exception
     */
    public function getEligibleProducts()
    {

        if (!empty($this->email)) {
            $developer_id = $this->email;
        } else {
            throw new ParameterException("Developer id not specified");
        }

        $products = array();
        try {
            $url = rawurlencode($developer_id) . '/eligible-products';
            $this->get($url);
            $data = $this->responseObj;
            foreach ($data['product'] as $product) {
                unset($product['organization']);
                $products[$product['name']] = $product;
            }

        } catch (\Exception $e) {
            if (MintApiException::isMintExceptionCode($e)) {
                throw new MintApiException($e);
            } else {
                throw $e;
            }
        }
        return $products;
    }

    /*
     * accessors (getters/setters)
     */

    public function getApproxTaxRate()
    {
        return $this->approxTaxRate;
    }

    public function setApproxTaxRate($approx_tax_rate)
    {
        $this->approxTaxRate = $approx_tax_rate;
    }

    public function getAddresses()
    {
        return $this->addresses;
    }

    public function addAddress(DataStructures\Address $address)
    {
        $this->addresses[] = $address;
    }

    public function clearAddresses()
    {
        $this->addresses = array();
    }

    public function getBillingProfile()
    {
        return $this->billingProfile;
    }

    public function setBillingProfile($billing_profile)
    {
        $this->billingProfile = $billing_profile;
    }

    public function getBillingType()
    {
        return $this->billingType;
    }

    public function setBillingType($type)
    {
        $this->billingType = BillingType::get($type);
    }

    /**
     * @return \Apigee\Mint\DeveloperCategory
     */
    public function getDeveloperCategory()
    {
        return $this->developerCategory;
    }

    /**
     * @param \Apigee\Mint\DeveloperCategory $dev_category
     */
    public function setDeveloperCategory(DeveloperCategory $dev_category)
    {
        $this->developerCategory = $dev_category;
    }

    public function getDeveloperRole()
    {
        return $this->developerRole;
    }

    public function setDeveloperRole($developer_role)
    {
        $this->developerRole = $developer_role;
    }

    public function isBroker()
    {
        return $this->broker;
    }

    public function setBroker($bool = true)
    {
        $this->broker = (bool)$bool;
    }

    public function getEmail()
    {
        return $this->email;
    }

    public function setEmail($email)
    {
        // TODO: validate
        $this->email = $email;
    }

    public function hasSelfBilling()
    {
        return $this->hasSelfBilling;
    }

    public function setHasSelfBilling($has_self_billing)
    {
        $this->hasSelfBilling = $has_self_billing;
    }

    public function getId()
    {
        return $this->id;
    }

    public function setId($id)
    {
        $this->id = $id;
    }

    public function getLegalName()
    {
        return $this->legalName;
    }

    public function setLegalName($name)
    {
        $this->legalName = $name;
    }

    public function getName()
    {
        return $this->name;
    }

    public function setName($name)
    {
        $this->name = $name;
    }

    /**
     * @return \Apigee\Mint\Organization
     */
    public function getOrganization()
    {
        return $this->organization;
    }

    /**
     * @param \Apigee\Mint\Organization $organization
     */
    public function setOrganization(Organization $organization)
    {
        $this->organization = $organization;
    }

    /**
     * @return \Apigee\Mint\Developer
     */
    public function getParentId()
    {
        return $this->parentId;
    }

    /**
     * @param \Apigee\Mint\Developer $developer
     */
    public function setParentId(Developer $developer)
    {
        $this->parentId = $developer;
    }

    public function getPhone()
    {
        return $this->phone;
    }

    public function setPhone($phone)
    {
        $this->phone = $phone;
    }

    public function getRatePlan()
    {
        return $this->ratePlan;
    }

    public function addRatePlan($rate_plan)
    {
        $this->ratePlan[] = $rate_plan;
    }

    public function getRegistrationId()
    {
        return $this->registrationId;
    }

    public function setRegistrationId($id)
    {
        // TODO: validate
        $this->id = $id;
    }

    public function getStatus()
    {
        return $this->status;
    }

    public function setStatus($status)
    {
        $this->status = DeveloperStatusType::get($status);
    }

    public function getTaxExemptAuthNo()
    {
        return $this->taxExemptAuthNo;
    }

    public function setTaxExemptAuthNo($tax_exempt_auth_no)
    {
        $this->taxExemptAuthNo = $tax_exempt_auth_no;
    }

    public function getTransactionBrokerages()
    {
        return $this->transactionBrokerages;
    }

    public function addTransactionBrokerages($transaction_brokerages)
    {
        $this->transactionBrokerages[] = $transaction_brokerages;
    }

    public function clearTransactionBrokerages()
    {
        $this->transactionBrokerages = array();
    }

    public function getType()
    {
        return $this->type;
    }

    public function setType($type)
    {
        $this->type = DeveloperType::get($type);
    }
}
